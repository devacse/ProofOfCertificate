{
  "_args": [
    [
      {
        "raw": "light-server",
        "scope": null,
        "escapedName": "light-server",
        "name": "light-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/doltry/Ethereum-project/proof-of-certificates"
    ]
  ],
  "_from": "light-server@latest",
  "_id": "light-server@2.2.1",
  "_inCache": true,
  "_location": "/light-server",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/light-server-2.2.1.tgz_1501305894795_0.7803224774543196"
  },
  "_npmUser": {
    "name": "txchen",
    "email": "txchendev@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "light-server",
    "scope": null,
    "escapedName": "light-server",
    "name": "light-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/light-server/-/light-server-2.2.1.tgz",
  "_shasum": "021291985bd4b1201def6ebaa1d5b3fe10a96099",
  "_shrinkwrap": null,
  "_spec": "light-server",
  "_where": "/home/doltry/Ethereum-project/proof-of-certificates",
  "author": {
    "name": "Tianxiang Chen"
  },
  "bin": {
    "light-server": "bin/light-server"
  },
  "bugs": {
    "url": "https://github.com/txchen/light-server/issues"
  },
  "dependencies": {
    "commander": "^2.9.0",
    "connect": "~3.4.1",
    "connect-history-api-fallback": "^1.3.0",
    "connect-injector": "^0.4.2",
    "glob": "^7.0.3",
    "http-proxy": "^1.13.2",
    "morgan": "~1.7.0",
    "opener": "^1.4.3",
    "parseurl": "^1.3.1",
    "serve-static": "~1.10.2",
    "spdy": "^3.4.4",
    "strip-json-comments": "^2.0.1",
    "ws": "^1.0.1"
  },
  "description": "an http server that can watch files, trigger commands and livereload",
  "devDependencies": {
    "eslint": "^4.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8xwwbbSV4Zdt5CnbdeRGaDIK2JvTs/EHDZLhIrJ8QfJjJG5cpmIr0vS36AiuIQ/OuDvoYKI4jOg7etG0G3YpJQ==",
    "shasum": "021291985bd4b1201def6ebaa1d5b3fe10a96099",
    "tarball": "https://registry.npmjs.org/light-server/-/light-server-2.2.1.tgz"
  },
  "gitHead": "b10941cf4ec5eee654f05ea0fcff6206db9a4736",
  "homepage": "https://github.com/txchen/light-server",
  "keywords": [
    "http",
    "server",
    "livereload",
    "live-reload",
    "watch",
    "execute",
    "dev"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "txchen",
      "email": "txchendev@gmail.com"
    }
  ],
  "name": "light-server",
  "optionalDependencies": {},
  "readme": "# light-server\n\nA lightweight cli static http server and it can watch files, execute commands and trigger livereload.\n\n## Why light-server?\n\nWhen I was writing some simple static web apps, it was helpful to have some tools to serve static http, to watch files and run command, and to trigger refresh in browser.\n\nI think the scenario is not too complicated, so I don't want to use heavy tools like grunt or gulp. IMO, npm script with cli tools is already enough.\n\nHere is an [article](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/) about using npm to replace grunt/gulp, I really like it.\n\nThere are many existing tools in npm, but I could not find one to do all the things for me. Well, actually browser-sync is one, but it offers too many features I don't need, and its installation time is really, unacceptable.\n\nNot lucky enough :(\n\nThen I wrote light-server, with the following features:\n* A simple static http server\n* Watch files, support multiple glob expressions\n* Trigger custom command if watched files change\n* Trigger browser reload if watched files change\n* Trigger css reload without refreshing page\n* Live reload does not require any setup, and even works on smart phones\n* Auto inject client reload javascript in html, no need to manually add\n* Live reload websocket server uses the same port as http server\n* Proxy to another http server\n* Html5 history API mode for SPA\n\nAnd now my package.json is simpler and cleaner than before :)\n\n## Install\n\nlight-server has much smaller footprint, compared to browser-sync, so it is recommended to install in project level, and use it with npm script.\n\n```bash\n$ npm install light-server\n```\nOf course, you can install it globally, too.\n\n## Usage\n\n```\nUsage: light-server [options]\n\nOptions:\n\n  -h, --help                           output usage information\n  -V, --version                        output the version number\n  -c, --config <configfile>            read options from config file\n  -s, --serve <directory>              serve the directory as static http\n  -p, --port <port>                    http server port, default 4000\n  -b, --bind <bind>                    bind to a specific host, default 0.0.0.0\n  -w, --watchexp <watch expression>    watch expression, repeatable\n  -i, --interval <watch inteval>       interval in ms of watching, default 500\n  -d, --delay <livereolad delay>       delay in ms before triggering live reload, default 0\n  -x, --proxy <upstreamurl>            when file not found, proxy the request to another server\n  --proxypath <proxypath>              only send to proxy when path match this pattern, default is \"/\"\n  -q, --quiet                          quiet mode with minimum log message\n  -o, --open                           open browser automatically\n  --http2                              enable http2 tls mode\n  --historyindex <historyindex>        404 fallback index path, used by SPA development\n\nExamples:\n\n  $ light-server -s . -p 7000\n  $ light-server -s dist --http2 -o\n  $ light-server -s dist --historyindex '/index.html'\n  $ light-server -s . -w \"*.js, src/** # npm run build && echo wow!\"\n  $ light-server -s . -x http://localhost:8000\n  $ light-server -s . -b 10.0.0.1\n  $ light-server -x http://localhost:9999 --proxypath \"/api\" -w \"public/**\"\n  $ light-server -s static -w \"**/*.css # # reloadcss\"\n  $ light-server -c .lightserverrc\n  & light-server -s . -p 8000 -w \"src/**/*.js # npm run js # no-reload\"\n\nWatch expression syntax: \"files[,files] # [command to run] # [reload action]\"\n  3 parts delimited by #\n  1st part: files to watch, support glob format, delimited by \",\"\n  2nd part: (optional) command to run, before reload\n  3rd part: (optional) reload action, default is \"reload\", also supports \"reloadcss\" or \"no-reload\" to run a command without a browser refresh\n  Examples:\n    \"**/*.js, index.html # npm run build # reload\"\n    \"*.css # # reloadcss\"\n    \"** # make\"\n    \"**/*.js # npm run build # no-reload\"\n```\n\nIt is quite simple, specify the folder to serve as static http, specify the files to watch, specify the command to run when watched files change, and light-server will do the job.\n\n**You don't need to add reload script into your html, light-server will inject it automatically.**\n\nYou don't need to use all the features, and that's totally ok:\n\n* You can serve http without watching files.\n* You can serve http and enable live-reload, without triggering command.\n* You can watch files and trigger command, without serving http. This makes light-server work like `nodemon`, with more flexibility.\n\n## Manual trigger live-reload\n\nGet or POST `http://localhost:PORT/__lightserver__/trigger`, light-server will send reload event to the browser.\n\nGet or POST `http://localhost:PORT/__lightserver__/triggercss`, Light-server will send reloadcss event to the browser.\n\nIt means that it's possible to integrate other tools with light-server.\n\n## Proxy\n\nProxy feature is useful when our project is some backend language(like go, python) + static web page.\n\nFor example, a golang web app exposes REST api via http://host/api/ and server static page from http://host/. Then, when we are writing/debugging the static pages, light-server can be helpful. We can firstly launch the whole app and listen at `http://localhost:9000`, then in another terminal window, launch light-server:\n\n```bash\n$ cd <your static pages dir>\n$ light-server -s . -p 8000 -x http://localhost:9000\n```\n\nNow when you access the static pages/js/css, light-server will return it directly. And if you access something like `http://localhost:8000/v1/myapi`, light-server cannot find the resource, and will proxy the request to upstream - `http://localhost:9000/v1/myapi`, which is the golang app.\n\nThis is cool because now you can have live-reload, without changing the golang app to add some dirty hacky changes, and you don't need to change the html to inject any extra js just for development. Light-server deals with all the dirty work.\n\n## Example\n\nLet's take a look at a real example. [Riot-Hackernews](https://github.com/txchen/riot-hn) is static web app powered by riotjs. This is its package.json:\n\n```json\n{\n  \"devDependencies\": {\n    \"browserify\": \"^8.1.3\",\n    \"light-server\": \"^1.0.0\",\n    \"minifyify\": \"^6.2.0\",\n    \"riotify\": \"^0.0.9\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:js && npm run build:css\",\n    \"build:js\": \"browserify -t [riotify --ext html] -d src/index.js -p [minifyify --compressPath . --map index.js.map --output build/index.js.map] -o build/index.js\",\n    \"build:css\": \"cp src/main.css build/main.css\",\n    \"dev\": \"light-server -s . -p 9090 -w 'src/**/*.js, src/**/*.html # npm run build:js' -w 'src/main.css # npm run build:css # reloadcss'\"\n  },\n  \"dependencies\": {\n    \"riot\": \"^2.0.11\"\n  }\n}\n```\n\nThe project uses browserify and plugins to bundle the source code into a single bundle.js, it is not using css pre/post processors but for sure it could.\n\nThe build process is defined in script `build`, which is quite straightforward.\n\nDuring development, we can use `npm run dev`, which will use light-server to serve the static content, and watch the changes of any js/html files under `src` directory. When it detects file change, it would trigger build and if build pass, browser will auto reload. And light-server will watch the source css file, when it changes, trigger reloadcss, which is faster than page refresh.\n\nOf course, you can also achieve that by using grunt or gulp, with more dependencies and more LOC.\n\n## Config file\n\nLight-server also supports read options from config file, it might be useful if the command line is too long in your package.json.\n\nTo use config file, create a json file and use `-c/--config`. The config template is like this:\n\n```json\n{\n  \"port\": 8000,\n  \"interval\": 500,\n  \"delay\": 0,\n  \"bind\": \"localhost\",\n  \"serve\": \"src\",\n  \"watchexps\": [\n    \"**.js # npm run build\",\n    \"*.css # # reloadcss\"\n  ],\n  \"proxy\": \"http://localhost:9999\",\n  \"proxypath\": \"/api\",\n  \"quiet\": false,\n  \"open\": true,\n  \"historyindex\": \"/index.html\",\n  \"http2\": false\n}\n```\n\nYou can use comments in the json, because we love comments in json:) Also all the fields in the json are optional.\n\n[This](./example) is an example to show how to use the config file, thanks @Scarysize for making this.\n\nThe values in the command line have higher priority than the ones in config file.\n\n## Changelog\n\n**2017-07-28** `2.2.1`\nOpen localhost in browser instead of 0.0.0.0, because 0.0.0.0 is not working on win.\n\n**2017-07-26** `2.2.0`\nAdd --proxypath. Add history fallback mode, for SPA development.\n\n**2017-07-24** `2.1.0`\nAdd -o/--open option, to open browser automatically.\n\n**2017-04-30** `2.0.2`\nChange default bind value to undefined, align with node server.listen.\n\n**2017-01-19** `2.0.0`\nBump version to 2.0.0, since 1.1.8 introduced breaking changes.\n\n**2017-01-19** `1.1.10`\n1.1.8 and 1.1.9 introduced breaking change, republish a new 1.1.x to fix.\n\n**2017-01-13** `1.1.9`\nAdd http2 mode.\n\n**2017-01-13** `1.1.8`\nMake the options in configFile, cli and default use consistent names. Thanks @pmast for the initial PR.\n\n**2016-05-30** `1.1.7`\nAdd no-reload option, thanks @Scarysize for the PR.\n\n**2016-03-10** `1.1.6`\nFix proxyUrl bug, thanks @aemkei for the PR.\n\n**2016-01-25** `1.1.5`\nAdd config file support.\n\n**2016-01-24** `1.1.4`\nImprove css reload, thanks @eliot-akira for the PR.\n\n**2016-01-22** `1.1.3`\nAdd quiet mode, thanks @eliot-akira for the PR.\n\n**2015-12-01** `1.1.2`\nImprove help message.\n\n**2015-12-01** `1.1.1`\nSet changeOrigin to true by default when creating proxy. Thanks @joelcollinsdc for reporting this issue.\n\n**2015-10-15** `1.1.0`\nNow we can use proxy without static serving. Also improve the html injecting logic\n\n**2015-10-12** `1.0.7`\nUpgrade npm dependencies\n\n**2015-07-31** `1.0.6`\nAdd bind option, by @davidmarkclements\n\n**2015-05-30** `1.0.3`\nFix typo\n\n**2015-04-16** `1.0.1`\nPrint command execution duration\n\n**2015-04-15** `1.0.0`\nNew feature: watch and reload css without refreshing page\nBreaking change: change CLI interface to support reloadcss\n\n**2015-04-12** `0.1.4`\nNew feature: proxy\n\n**2015-03-02** `0.1.3`\nAdd delay option\n\n**2015-02-28** `0.1.1`\nFirst version.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/txchen/light-server.git"
  },
  "scripts": {
    "lint": "eslint bin/* *.js"
  },
  "version": "2.2.1"
}
